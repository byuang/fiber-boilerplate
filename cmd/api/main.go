package main

import (
	"github.com/gofiber/fiber/v2/middleware/cors"
	"scylla/dto"
	"scylla/handler"
	"scylla/pkg/config"
	"scylla/pkg/connection"
	"scylla/pkg/exception"
	"scylla/pkg/utils"
	"scylla/repository"
	"scylla/service"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/fiber/v2/middleware/requestid"
	"github.com/swaggo/fiber-swagger"
	docs "scylla/docs" // docs is generated by Swag CLI, you have to import it.
)

//	@title			Boilerplate API
//	@version		1.0
//	@description	Boilerplate API in Go using Fiber framework

//	@securityDefinitions.apikey	Bearer
//	@in							header
//	@name						Authorization
//	@description				Type "Bearer" followed by a space and JWT token.

func main() {
	//config
	conf := config.Get()

	//database
	db := connection.GetDatabase(conf.Database)

	//Validate
	validate := utils.InitializeValidator()

	// environment swagger
	if conf.Swagger.Mode != "dev" {
		docs.SwaggerInfo.Host = conf.Swagger.Host
		docs.SwaggerInfo.BasePath = conf.Swagger.Url
	} else {
		docs.SwaggerInfo.Host = "localhost:3000"
		docs.SwaggerInfo.BasePath = "/api/v1"
	}
	// init repository
	customerRepo := repository.NewCustomerRepoImpl(db)
	// init service
	customerService := service.NewCustomerServiceImpl(customerRepo, validate)
	dmsService := service.NewDmsServiceImpl()
	// init handler
	customerHandler := handler.NewCustomerHandler(customerService)
	dmsHandler := handler.NewDmsHandler(dmsService)

	app := fiber.New(fiber.Config{
		ErrorHandler: exception.ExceptionHandlers,
	})
	app.Use(recover.New())
	app.Use(requestid.New())
	app.Use(cors.New())
	app.Use(logger.New(logger.Config{
		Format: "[${locals:requestid}] ${ip} - ${method} ${status} ${path} - ${latency}\n",
	}))
	//routes v1
	customerHandler.Route(app)
	dmsHandler.Route(app)
	//docs
	app.Get("/docs/*", fiberSwagger.WrapHandler)
	//endpoint not found
	app.Use(func(ctx *fiber.Ctx) error {
		return ctx.Status(fiber.StatusNotFound).JSON(dto.Error{
			Code:    fiber.StatusNotFound,
			Status:  "NOT FOUND",
			Errors:  "Page Not Found",
			TraceID: ctx.Locals("requestid").(string),
		})
	})
	//start
	err := app.Listen(":" + conf.Server.Port)
	if err != nil {
		panic(err)
	}
}
